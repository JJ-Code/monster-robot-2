{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","components/scroll/Scroll.jsx","components/ErrorBoundry/ErrorBoundry.jsx","context/robots/robotsContext.jsx","App.jsx","context/robots/robotsReducer.jsx","context/types.jsx","context/robots/RobotsState.jsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","username","className","alt","src","CardList","robots","map","robot","index","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","console","log","error","robotsContext","createContext","App","useContext","RobotsContext","fetchRobots","setCurrentSearch","robotFriends","noResults","useEffect","length","e","preventDefault","target","value","state","action","defaultRobots","payload","filterRobots","filter","robotFriend","toLowerCase","includes","RobotsState","useReducer","RobotsReducer","dispatch","a","fetch","then","response","json","data","statusText","Provider","search_val","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.13ce6980.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ id, name, username, email }) => {\n\n  return (\n    <div className='card-container bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5'>\n      <img alt=\"monster\" src={`https://robohash.org/${id}?set=set3&size=200x200`} />\n      <h2>{name}</h2>\n      {/* <p>{username}</p> */}\n      <p>{email}</p>\n\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react'\nimport Card from \"../card/Card\";\n\n\nconst CardList = ({robots}) => {\n  return (\n    <div className='card-list'>\n      {robots.map((robot, index) => {\n        return <Card key={index} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ onSearchChange }) => {\n\n\n  return (\n    <div className='p2'>\n      <input className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n        onChange={onSearchChange} />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","//Error Boundary only exist for class components but you can use a try catch to do the same thing since there is no hook version of componentdidcatch. To see the the class version see below functional component \n\n\nimport React from 'react'\n\nconst ErrorBoundry = (props) => {\n  console.log(props.children);\n\n  try {\n    return props.children\n  } catch (error) {\n    console.log(error);\n    return (<h1>Something has went wrong</h1>)\n\n  }\n}\n\nexport default ErrorBoundry;\n\n\n// import React, { Component, Fragment } from 'react'\n\n// class ErrorBoundry extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       hasError: false\n//     }\n//   }\n\n//   componentDidCatch(error, info) {\n//     this.setState({ hasError: true })\n//     console.log(error);\n\n//   }\n\n//   render() {\n//     console.log(this.props)\n//     console.log(this.state.hasError)\n//     return (\n//       <Fragment>\n//         {(this.state.hasError === false) ?\n//           (this.props.children) : (<h1>Something has went wrong</h1>)}\n//       </Fragment>)\n//   }\n// };\n\n// export default ErrorBoundry;","import { createContext } from \"react\";\n\nconst robotsContext = createContext();\n\nexport default robotsContext;\n","import React, { useEffect, useContext, Fragment } from 'react';\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport Scroll from \"./components/scroll/Scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry/ErrorBoundry\";\n\nimport RobotsContext from \"./context/robots/robotsContext\";\nimport './App.css';\n\n\n\nconst App = () => {\n  const robotsContext = useContext(RobotsContext)\n  const { fetchRobots, setCurrentSearch, robotFriends, noResults } = robotsContext\n  useEffect(() => {\n    fetchRobots()\n    // eslint-disable-next-line\n  }, [])\n\n\n\n  const onSearchChange = (e) => {\n    e.preventDefault();\n    setCurrentSearch(e.target.value)\n  }\n\n  //console.log(robotFriends);\n\n  return (\n\n    <div className='App tc'>\n      <h1 className='f1'>Robot Friends</h1>\n      {robotFriends.length === 0 ? (<h1>Loading...</h1>) :\n        (<Fragment>\n          <SearchBox onSearchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              {(noResults === true) ? (<h2>No results...</h2>) : (<CardList robots={robotFriends} />)}\n            </ErrorBoundry>\n          </Scroll>\n        </Fragment>)}\n    </div>\n\n\n  );\n};\n\n\nexport default App;\n","import { GET_ROBOTS, SET_CURRENT_ROBOTS, ROTBOTS_ERROR } from \"../types\";\n\n// const initialState = {\n//   robotFriends: [],\n//   defaultRobots: [],\n//   noResults: false,\n//   error: null\n// }\n\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_ROBOTS:\n      return {\n        ...state,\n        defaultRobots: action.payload,\n        robotFriends: action.payload\n      };\n    case SET_CURRENT_ROBOTS:\n      console.log(state.robotFriends);\n      const filterRobots = state.defaultRobots.filter(robotFriend => robotFriend.name.toLowerCase().includes(action.payload.toLowerCase()));\n      console.log(filterRobots);\n\n      return {\n        ...state,\n        robotFriends: (filterRobots.length === 0) ? state.defaultRobots : filterRobots,\n        noResults: (filterRobots.length === 0) ? true : false\n\n      };\n    case ROTBOTS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n","export const GET_ROBOTS = 'GET_ROBOTS';\nexport const ROTBOTS_ERROR = 'ROTBOTS_ERROR';\nexport const SET_CURRENT_ROBOTS = 'SET_CURRENT_ROBOTS';\n\n//export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';","import React, { useReducer } from \"react\";\nimport RobotsContext from \"./robotsContext\";\nimport RobotsReducer from './robotsReducer';\n\nimport { GET_ROBOTS, SET_CURRENT_ROBOTS, ROTBOTS_ERROR } from \"../types\";\n\n\n\n\n\nconst RobotsState = props => {\n  const initialState = {\n    robotFriends: [],\n    defaultRobots: [],\n    noResults: false,\n    error: null\n  }\n\n\n  const [state, dispatch] = useReducer(RobotsReducer, initialState)\n\n  //fetech robots from API\n  const fetchRobots = async () => {\n    try {\n      const data = await fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n\n      dispatch({\n        type: GET_ROBOTS,\n        payload: data\n      });\n    } catch (err) {\n      dispatch({\n        type: ROTBOTS_ERROR,\n        payload: err.response.statusText\n      });\n    }\n  };\n\n\n\n  // Set current search\n  const setCurrentSearch = search_val => {\n    console.log(search_val);\n\n    dispatch({\n      type: SET_CURRENT_ROBOTS,\n      payload: search_val\n    })\n\n  };\n\n\n\n\n\n\n\n\n  return <RobotsContext.Provider\n    value={\n      {\n        robotFriends: state.robotFriends,\n        defaultRobots: state.defaultRobots,\n        noResults: state.noResults,\n        error: state.error,\n        fetchRobots,\n        setCurrentSearch\n      }\n    }>\n    {props.children}\n\n  </RobotsContext.Provider>\n\n}\n\nexport default RobotsState;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport RobotsState from \"./context/robots/RobotsState\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RobotsState>\n      <App />\n    </RobotsState>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}